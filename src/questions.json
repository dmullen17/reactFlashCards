{"questionsList": [
    {"question": "What does this CSS do and why is it useful in responsive design? * {box-sizing: border-box;}",
     "categories": ["CSS"],
     "answer": "It includes the padding and border in width and height of all elements.  If we set a width on an element, for instance 25%, we can add border or padding while ensuring it remains constant at 25%."},
    {"question": "What is the basic idea behind CSS? (one sentence)",
    "categories": ["CSS"],
    "answer": "In CSS you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page."},
    {"question": "What are the three components of a hexadecimal color?  What is the lowest hexadecimal value and what color does it represent?",
     "categories": ["CSS"],
     "answer": "A hexadecimal color has three components - red, green, and blue.  Two hexadecimal digits represent each component from 00 - FF.  #000000 is the lowest value and represents black."
    },
    {"question": "Explain CSS variable cascading and why it is useful.",
    "categories": ["CSS"],
    "answer": "In CSS a variable is available for use in any elements nested within the element it was created in.  This effect is known as cascading.  CSS variables are often created in the :root element so they are available throughout the page."},
    {"question": "Explain the difference between a browser fallback and a variable fallback.",
    "categories": ["CSS"],
    "answer": "You can attach fallback values to CSS variables that they revert to if the initial value is invalid.  For instance: {background-color: var(--background-color, black)}.  When a browser parses your CSS it ignores any properties it does not support.  IE does not support variables.  A browser fallback is providing a more supported value immediately before your declaration, {background-color: black}, so the browser can fall back on it."},
    {"question": "Explain the difference between margin and padding.",
    "categories": ["CSS"],
    "answer": "Padding is the distance between an element's content and its border.  Margin is the distance between an element's border and other content."},
    {"question": "Explain the float property.",
    "categories": ["CSS"],
    "answer": "Floating elements are removed from the normal flow of a document. They are pushed to the left or right of their parent element."},
    {"question": "What does {font-size: 2em} mean?",
    "categories": ["CSS"],
    "answer": "em are relative size units.  If the default size on the page is 12px then 2em corresponds to 24px."},
    {"question": "What is a psuedo-class?",
    "categories": ["CSS"],
    "answer": "A psuedo-class is a specific keyword that can be added to a selector in order to select a specific state of an element.  For example we can apply the hover psuedo-class to change the CSS rules when the mouse hovers over an element."},
    {"question": "Explain the differences between relative, absolute, and fixed positioning",
    "categories": ["CSS"],
    "answer": "UNANSWERED"},
    {"question": "Explain how keyframes animations work.",
    "categories": ["CSS"],
    "answer": "A keyframes animation takes one or more properties and transitions it from a starting to end value over a set period of time.  For example we can change the background from yellow to blue in 3s.  Multiple properties "},
    {"question": "Explain how cubic-bezier curves and the cubic bezier function work.",
    "categories": ["CSS"],
    "answer": ""},
    {"question": "What is the difference between the container and container-fluid classes in Bootstrap?",
    "categories": ["CSS"],
    "answer": "The container class is intentionally not 100% width. It is different fixed widths depending on the width of the viewport. Container-fluid adjusts itself to the full width of the screen."},
    {"question": "In a responsive navigation bar give an example of how you might set margin and font-size for <li> elements.",
    "categories": ["CSS"],
    "answer": "{margin: 0 2vw; font-size: 3vh;} is a clean responsive design."},
    {"question": "How do you overwrite default CSS properties in React bootstrap classes?",
    "categories": ["CSS", "React"],
    "answer": "You can use inline CSS in the element itself.  Applying a default class will not work as the React Bootstrap class takes precedence."},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== Sass QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "What is Sass?",
    "categories": ["Sass"],
    "answer": "Syntactically Awesome StyleSheets is a language extension of CSS. It adds features that aren't available using basic CSS syntax. Sass makes it easier for developers to simplify and maintain the style sheets for their projects."},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "",
    "categories": ["Sass"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== JavaScript QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "How do you return the nth character in a string variable?",
    "categories": ["JavaScript"],
    "answer": "With bracket notation.  For instance varName[0] would return the first character."},
    {"question": "Explain string immutability in JavaScript.",
    "categories": ["JavaScript"],
    "answer": "Individual characters in a string literal cannot be altered.  For instance the first character in a string can't be re-assigned.  However you can re-assign the value of a string variable by assigning it to a new string."},
    {"question": "What 4 array methods add / remove values from the beginning and end of arrays? Do these methods manipulate the original object or return a new object?",
    "categories": ["JavaScript"],
    "answer": ".push adds a value to the end, .pop removes a value from the end, .shift removes a value from the beginning, and .unshift adds a value to the beginning.  All of these methods manipulate the original array."},
    {"question": "Explain the concept of scope.",
    "categories": ["JavaScript"],
    "answer": "Scope refers to the visibility of variables - or the scope of a variable is where you can access it. Variables which are defined outside of a function block have Global scope."},
    {"question": "In a function body what takes precedence - local or global scope?",
    "categories": ["JavaScript"],
    "answer": "Local scope takes precedence. If two variables share the same name the function will call the local one."},
    {"question": "What is the difference between the comparison operator and the strict comparison operator?",
    "categories": ["JavaScript"],
    "answer": "The comparison operator (==) uses type coercion to attempt to convert values to a common type before comparison.  The strict comparison operator (===) doesn't do this and returns false if the compared values have different types."},
    {"question": "Name 3 ways you can access an object's property.  Let's say obj = {'dog': 'golden retriever'};",
    "categories": ["JavaScript"],
    "answer": "You can use dot notation: obj.dog, bracket notation: obj['dog'], and finally using a variable: var animal = 'dog'; obj[animal];"},
    {"question": "How do you do delete a property from an object?  Lets use obj = {'dog': 'golden retriever'};",
    "categories": ["JavaScript"],
    "answer": "delete obj.dog;"},
    {"question": "What method can you call to test if an object has a specific property?",
    "categories": ["JavaScript"],
    "answer": "obj.hasOwnProperty(propname)"},
    {"question": "What is the for loop syntax in JS?",
    "categories": ["JavaScript"],
    "answer": "for (var i=0; i<5, i++) {\n   console.log(i);\n}"},
    {"question": "Explain how the ternary operator works",
    "categories": ["JavaScript"],
    "answer": "The ternary operator evaluates a conditional, then performs one action if it's true and another if it's false.  It's shorthand syntax for a simple if-else block.  You can also chain them together to evaluate multiple conditions."},
    {"question": "What are the differences in scope between var and let?",
    "categories": ["JavaScript"],
    "answer": "Var has global scope is declared outside a function - or locally if inside a function.  Let's scope is limited to the block, expression, or statement it's declared in.  "},
    {"question": "Can you mutate variables declared with const?",
    "categories": ["JavaScript"],
    "answer": "Yes, for instance you can mutate individual values in an array declared with const.  You cannot, however, reassign a variable declared with const."},
    {"question": "Write an arrow function with no function body",
    "categories": ["JavaScript"],
    "answer": "const myFunc = () => 'value'"},
    {"question": "What is the spread operator?",
    "categories": ["JavaScript"],
    "answer": "..., or the spread operator, allows us to expand arrays and other expressions in places where multiple parameters or elements are expected"},
    {"question": "What is the rest operator?",
    "categories": ["JavaScript"],
    "answer": "The rest operator, or function(...args), allows us to pass a multiple number of arguments to a function."},
    {"question": "What three methods are useful for reversing a string?  Hint: one str and two arr.",
    "categories": ["JavaScript"],
    "answer": "str.split(''), arr.reverse(), and arr.join('')"},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "",
    "categories": ["JavaScript"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== jQuery QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "How does the document ready ($(document).ready(function() {}) function work?",
    "categories": ["jQuery"],
    "answer": "The code you wrap in this function runs as soon as the page loads. Without the document ready function the code may run before the HTML is rendered."},
    {"question": "What are the two names for the '$' in jQuery?",
    "categories": ["jQuery"],
    "answer": "The dollar sign operator or bling."},
    {"question": "How do you select multiple elements using the bling operator?",
    "categories": ["jQuery"],
    "answer": "Separate them with commas.  Ex: $('i, button')"},
    {"question": "How do you change the CSS of an element using jQuery?",
    "categories": ["jQuery"],
    "answer": "We can use the .css() method.  Ex: $('#target1').css('color', 'blue');"},
    {"question": "How do you access the properties of an element?",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "",
    "categories": ["jQuery"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== React QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "How do you pass an event handler from a class component to a stateless component?",
    "categories": ["React"],
    "answer": "Pass it in as props to the stateless component, then "},
    {"question": "How do you add a package to a create-React app?",
    "categories": ["React"],
    "answer": "1. npm install --save font-awesome 2. Add import 'font-awesome/css/font-awesome.min.css' to the index.js file"},
    {"question": "Name the 3 basic exports from React-bootstrap.",
    "categories": ["React"],
    "answer": "<Container>, <Row>, <Col> are exported as stateless componenets. "},
    {"question": "How do you create a fluid Container in React-bootstrap?  What about an xs column that spans 6/12 possible columns?",
    "categories": ["React"],
    "answer": "<Container fluid={true}></Container>.  <Col xs={6}></Col>"},
    {"question": "What is a higher order component in React?",
    "categories": ["React"],
    "answer": "A higher-order component is a function that takes a component and returns a new component."},
    {"question": "What attribute do you add to a React <Col> element to make it auto-size to fit the size of its content?",
    "categories": ["React"],
    "answer": "<Col xs='auto'></Col>"},
    {"question": "What are the three steps to deploying a React-app with GH pages? ",
    "categories": ["React"],
    "answer": "Add a homepage URL to the package.json file, install the gh-pages packag with npm, and add predeploy: npm run build and deploy: gh-pages-d build to the scripts object in the package.json file."},
    {"question": "What is a React Hook?",
    "categories": ["React"],
    "answer": "Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes."},
    {"question": "Where can you call hooks?",
    "categories": ["React"],
    "answer": "Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions. Only call Hooks from React function components."},
    {"question": "How do you attach multiple callback functions to an event listener?",
    "categories": ["React"],
    "answer": "You can combine them inline like this: onClick={() => {this.toggleClass(); this.props.addTopic();} You can also create a separate class method that calls both callbacks, then simply call that method instead."},
    {"question": "Can svg text be valid JSX?",
    "categories": ["React"],
    "answer": "Yes the proper camel casing just needs to be applied to the inline svg text.  There are online converters that make it easy."},
    {"question": "What is lazy loading?",
    "categories": ["React"],
    "answer": "Load the components that are required first and load the others when they are required."},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== Node.js QUESTIONS =============================================="],
    "answer": ""},
    {"question": "What is node.js in one sentence?",
    "categories": ["Node.js"],
    "answer": "Node.js is a JavaScript tool that allows developers to write backend (server-side) programs in JavaScript"},
    {"question": "What is Express (hint: module)",
    "categories": ["Node.js"],
    "answer": "Express is a module often used with node. Express runs between the server created by Node.js and the frontend pages of a web application. Express also handles an application's routing. Routing directs users to the correct page based on their interaction with the application"},
    {"question": "What does the following Express method do? app.listen(port)",
    "categories": ["Node.js", "Express"],
    "answer": "It tells your server to listen on a given port, putting it in running state."},
    {"question": "Explain each part of this working Express server app.get('/', (req, res) => {res.send('Hello Express');});",
    "categories": ["Node.js", "Express"],
    "answer": "get is an HTTP method. The arguments to get are a relative file path on the server, and a handler function that takes the form: function(req, res). When a user makes a GET request to root, the handler function will be called and serve the response string: Hello Express."},
    {"question": "What response method should we use to serve an HTML file in response to an HTTP GET request?  What global variable might be helpful as an argument?",
    "categories": ["Node.js", "Express"],
    "answer": "The res.sendFile() method in the handler.  Using a global variable like __dirname is helpful in constructing an absolute file path. Example:     app.get('/', (req, res) => {res.sendFile(__dirname + '/views/index.html');});"},
    {"question": "What are some examples of static assets?",
    "categories": ["Node.js", "Express"],
    "answer": "Images, scripts and styles are static assets.  Middleware functions can add static assets to route handlers."},
    {"question": "What does the following middleware do?  What does the absence of the first argument (path) imply? \n app.use(express.static(__dirname + '/public'));",
    "categories": ["Node.js", "Express"],
    "answer": "The middleware function express.static loads the static asses in the __dirname + '/public' folder on a request.  The absence of path as the first argument in app.use means it will executer for every request - not just for one API endpoint."},
    {"question": "What does REST API stand for?  How does it transfer data?",
     "categories": ["Node.js", "Express"],
    "answer": "Rest stands for REpresentational State Transfer.  They're useful because the client doesn't need any details about the server.  To transfer data the client needs to know the endpoint (url) and the action it wants to perform (get, req, etc.)"},
    {"question": "How would you write a REST API using Express to serve the object: {'message': 'I love these flashcards!'} at the endpoint /json?",
     "categories": ["Node.js", "Express"],
    "answer": "app.get('/json', (req, res) {\n   res.json({'message': 'I love these flashcards!'})\n});"},
    {"question": "Is it safe to store private data in the .env file? How do you access a variable from this file in the app?  It's a shell file - what does this mean for variable declarations?",
     "categories": ["Node.js", "Express"],
    "answer": "Yes - the .env file is hidden and  only accessbile to you - it's useful for API keys and config options.  You access a variable with this syntax: process.env.VAR_NAME.  Shell files don't allow spaces in variable declarations: MY_VAR=5"},
    {"question": "What are the three parameters to a middleware function?",
     "categories": ["Node.js", "Express"],
    "answer": "the request object, the response object, and the next function in the application’s request-response cycle"},
    {"question": "What happens when a middleware function doesn't call next()?",
     "categories": ["Node.js", "Express"],
    "answer": "If the middleware function doesn't end the request-response cycle it must call next() otherwise it will be left hanging.  A middleware function that ends the cycle does not need to call next."},
    {"question": "What happens when you mount the following middleware function on a route? function(req, res, next) {\n   console.log(I'm a middleware...');\n   next();\n}",
     "categories": ["Node.js", "Express"],
    "answer": "When a request matches the route, it displays the string “I’m a middleware…”. Then it executes the next function in the stack."},
    {"question": "What's the advantage of chaining middleware?",
     "categories": ["Node.js", "Express"],
    "answer": "Chaining middleware splits operations into smaller chunks which creates more reusable code and better app structure.  You can also perform data validation steps and if neceessary block the execution of the current chain and pass control to functions specifically designed to handle errors."},
    {"question": "What are API route parameters?  Where can you access their values in a middleware function?  Write a route parameter that accepts a userID parameter.",
     "categories": ["Node.js", "Express"],
    "answer": "Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the URL which matches its position. The captured values can be found in the req.params object. path: /user/:userID/ request: /user/546, response: {userId: '546'}"},
    {"question": "What does chaining multiple verb handlers on a route path mean?",
     "categories": ["Node.js", "Express"],
    "answer": "We can chain multiple handlers to one route using the following syntax: app.route(path).get(handler).post(handler).  This creates more concise code by attaching a GET and POST handler to one path, rather than two separate route + get and route + post functions."},
    {"question": "What syntax does an API endpoint use to receive query parameter input?",
     "categories": ["Node.js", "Express"],
    "answer": "The query string, after the endpoint, is delimited by a question mark (?), and includes field=value couples. Each couple is separated by an ampersand (&)."},
    {"question": "What is the POST method?",
     "categories": ["Node.js", "Express"],
    "answer": "POST is the default method used to send client data with HTML forms. In the REST convention POST is used to send data to create new items in the database (a new user, or a new blog post)"},
    {"question": "What does the following code do? const express = require('express')\nconst app = express();\napp.get('/', (req, res) => {\nres.send('Hello World!')\n});\napp.listen(8000, () => {\nconsole.log('Example app listening on port 8000!')\n});",
     "categories": ["Node.js", "Express"],
    "answer": "This code shows a minimal 'HelloWorld' Express web application. This imports the 'express' module using require() and uses it to create a server (app) that listens for HTTP requests on port 8000 and prints a message to the console explaining what browser URL you can use to test the server. The app.get() function only responds to HTTP GET requests with the specified URL path ('/'), in this case by calling a function to send our Hello World! message."},
    {"question": "How do you run a node.js express server from the command line?",
     "categories": ["Node.js", "Express"],
    "answer": "node server.js (or the name of the entry point file)."},
    {"question": "Where does the console.log command display?  Where can you access port 8000?\napp.listen(8000, () => {\nconsole.log('Example app listening on port 8000!')\n});",
     "categories": ["Node.js", "Express"],
    "answer": "The console.log displays in the terminal if you initiate the server from there. You can access port 8000 in your web browswer at http://127.0.0.1:8000/."},
    {"question": "What linking to a static asset in an entry point what's the difference between serving it with an app like Express vs. loading it in a IDE?",
     "categories": ["Node.js", "Express"],
    "answer": "If you use express to load static assets you only need to reference the file name in the link.  In an IDE (Brackets) you need the absolute file path."},
    {"question": "",
     "categories": ["Node.js", "Express"],
    "answer": ""},
    {"question": "",
     "categories": ["Node.js", "Express"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== MongoDB QUESTIONS =============================================="],
    "answer": ""},
    {"question": "What is MongoDB?",
     "categories": ["MongoDB"],
    "answer": "MongoDB is a database that stores data records (documents) for use by an application. Mongo is a non-relational, 'NoSQL' database. This means Mongo stores all data associated within one record, instead of storing it across many preset tables as in a SQL database."},
    {"question": "One of the benefits of MongoDB is flexibility: what does this mean?",
     "categories": ["MongoDB"],
    "answer": "Flexibility: new datasets and properties can be added to a document without the need to make a new table for that data."},
    {"question": "One of the benefits of MongoDB is scalability: what does this mean?",
     "categories": ["MongoDB"],
    "answer": "Scalability: by default, non-relational databases are split (or 'shared') across many systems instead of only one. This makes it easier to improve performance at a lower cost."},
    {"question": "One of the benefits of MongoDB is replication: what does this mean?",
     "categories": ["MongoDB"],
    "answer": "Replication: copies of the database run in parallel so if one goes down, one of the copies becomes the new primary data source."},
    {"question": "What is mongoose.js?",
     "categories": ["MongoDB"],
    "answer": "Mongoose.js is an npm module for Node.js that allows you to write objects for Mongo as you would in JavaScript. This can make it easier to construct documents for storage in Mongo"},
    {"question": "What is MongoDB atlas?",
     "categories": ["MongoDB"],
    "answer": "MongoDB Atlas is a MongoDB Database-as-a-Service platform, which basically means that they configure and host the database for you, making it so that the only responsibility you have is to populate your database"},
    {"question": "Explain IP whitelisting",
     "categories": ["MongoDB"],
    "answer": "IP whitelisting allows you to create lists of trusted IP addresses or IP ranges from which your users can access your domains."},
    {"question": "How do you connect to a mongo database using an express server hosted on node.js?",
     "categories": ["MongoDB"],
    "answer": "Install the mongoose and mondodb dependences using npm.  Store the server URI + password in the .env file.  Require mongoose and then connect to the db using mongoose.connect(server_uri)"},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "",
     "categories": ["MongoDB"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== NPM QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "What is npm?",
     "categories": ["npm"],
    "answer": "Node Package Manager (npm) is a command-line tool used by developers to share and control modules (or packages) of JavaScript code written for use with Node.js"},
    {"question": "What does the package.json file do in npm?",
     "categories": ["npm"],
    "answer": "This file lists the package dependencies for your project. Since npm packages are regularly updated, the package.json file allows you to set specific version numbers for each dependency."},
    {"question": "How do you enable the ion-icons library?",
     "categories": ["npm"],
    "answer": "npm install --save ionicons.  Then place the following script tag (with an updated version #) in your entry point file to enable them: <script src='https://unpkg.com/ionicons@4.5.9-1/dist/ionicons.js'> "},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "",
     "categories": ["npm"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== AWS QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "What is the Elastic Beanstalk service?",
     "categories": ["AWS"],
    "answer": "With Elastic Beanstalk, you can deploy, monitor, and scale an application quickly and easily"},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "",
     "categories": ["AWS"],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== Redux QUESTIONS =============================================="],
    "answer": ""},
    {"question": "What is Redux?",
     "categories": ["Redux"],
    "answer": "Redux is a state management framework. In Redux, there is a single state object that's responsible for the entire state of your application. The unidirectional data flow makes it easier to track state management in your app."},
    {"question": "What is the Redux store?  How do you initialize it?  What do you pass in as an argument?",
     "categories": ["Redux"],
    "answer": "The store is the object that holds state. The Redux.createStore method initializes it.  It takes a reducer function as input."},
    {"question": "What method do you use to retrieve state?",
     "categories": ["Redux"],
    "answer": "Call getState() on the Redux store object."},
    {"question": "What is an action?",
     "categories": ["Redux"],
    "answer": "An action is simply a JavaScript object that contains information about an action event that has occurred. Actions must carry a type property that specifies the 'type' of action that occurred.  They can also contain optional data."},
    {"question": "What is an action creator?",
     "categories": ["Redux"],
    "answer": "A JavaScript function that returns an action object."},
    {"question": "How do you pass an action event to the store?",
     "categories": ["Redux"],
    "answer": "The dispatch method."},
    {"question": "What is the role of a reducer function?",
     "categories": ["Redux"],
    "answer": "After an action event is dispatched to the store a reducer function handles it. A reducer takes state and action as arguments, and it always returns a new state.  This is the only role of reducer functions."},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""},
    {"question": "",
     "categories": ["Redux"],
    "answer": ""}
]}
