{"questionsList": [
    {"question": "What does this CSS do and why is it useful in responsive design? * {box-sizing: border-box;}",
     "categories": ["CSS", "responsive design"],
     "answer": "It includes the padding and border in width and height of all elements.  If we set a width on an element, for instance 25%, we can add border or padding while ensuring it remains constant at 25%."},
    {"question": "What is the basic idea behind CSS? (one sentence)",
    "categories": ["CSS"],
    "answer": "In CSS you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page."},
    {"question": "What are the three components of a hexadecimal color?  What is the lowest hexadecimal value and what color does it represent?",
     "categories": ["CSS"],
     "answer": "A hexadecimal color has three components - red, green, and blue.  Two hexadecimal digits represent each component from 00 - FF.  #000000 is the lowest value and represents black."
    },
    {"question": "Explain CSS variable cascading and why it is useful.",
    "categories": ["CSS"],
    "answer": "In CSS a variable is available for use in any elements nested within the element it was created in.  This effect is known as cascading.  CSS variables are often created in the :root element so they are available throughout the page."},
    {"question": "Explain the difference between a browser fallback and a variable fallback.",
    "categories": ["CSS"],
    "answer": "You can attach fallback values to CSS variables that they revert to if the initial value is invalid.  For instance: {background-color: var(--background-color, black)}.  When a browser parses your CSS it ignores any properties it does not support.  IE does not support variables.  A browser fallback is providing a more supported value immediately before your declaration, {background-color: black}, so the browser can fall back on it."},
    {"question": "Explain the difference between margin and padding",
    "categories": ["CSS"],
    "answer": "Padding is the distance between an element's content and its border.  Margin is the distance between an element's border and other content."},
    {"question": "Explain the float property",
    "categories": ["CSS"],
    "answer": "Floating elements are removed from the normal flow of a document. They are pushed to the left or right of their parent element."},
    {"question": "What does {font-size: 2em} mean?",
    "categories": ["CSS"],
    "answer": "em are relative size units.  If the default size on the page is 12px then 2em corresponds to 24px."},
    {"question": "What is a psuedo-class?",
    "categories": ["CSS"],
    "answer": "A psuedo-class is a specific keyword that can be added to a selector in order to select a specific state of an element.  For example we can apply the hover psuedo-class to change the CSS rules when the mouse hovers over an element."},
    {"question": "Explain the differences between relative, absolute, and fixed positioning",
    "categories": ["UNANSWERED"],
    "answer": ""},
    {"question": "Explain how keyframes animations work.",
    "categories": ["CSS"],
    "answer": "A keyframes animation takes one or more properties and transitions it from a starting to end value over a set period of time.  For example we can change the background from yellow to blue in 3s.  Multiple properties "},
    {"question": "Explain how cubic-bezier curves and the cubic bezier function work.",
    "categories": ["CSS"],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== REACT QUESTIONS ==============================================="],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "",
    "categories": [],
    "answer": ""},
    {"question": "PLACEHOLDER",
    "categories": ["=============================== Node.js QUESTIONS =============================================="],
    "answer": ""},
    {"question": "What is node.js in one sentence?",
    "categories": ["NODE.JS"],
    "answer": "Node.js is a JavaScript tool that allows developers to write backend (server-side) programs in JavaScript"},
    {"question": "What is Express (hint: module)",
    "categories": ["NODE.JS"],
    "answer": "Express is a module often used with node. Express runs between the server created by Node.js and the frontend pages of a web application. Express also handles an application's routing. Routing directs users to the correct page based on their interaction with the application"},
    {"question": "What does the following Express method do? app.listen(port)",
    "categories": ["NODE.JS", "EXPRESS"],
    "answer": "It tells your server to listen on a given port, putting it in running state."},
    {"question": "Explain each part of this working Express server app.get('/', (req, res) => {res.send('Hello Express');});",
    "categories": ["NODE.JS", "EXPRESS"],
    "answer": "get is an HTTP method. The arguments to get are a relative file path on the server, and a handler function that takes the form: function(req, res). When a user makes a GET request to root, the handler function will be called and serve the response string: Hello Express."},
    {"question": "What response method should we use to serve an HTML file in response to an HTTP GET request?  What global variable might be helpful as an argument?",
    "categories": ["NODE.JS", "EXPRESS"],
    "answer": "The res.sendFile() method in the handler.  Using a global variable like __dirname is helpful in constructing an absolute file path. Example:     app.get('/', (req, res) => {res.sendFile(__dirname + '/views/index.html');});"},
    {"question": "What are some examples of static assets?",
    "categories": ["NODE.JS", "EXPRESS"],
    "answer": "Images, scripts and styles are static assets.  Middleware functions can add static assets to route handlers."},
    {"question": "What does the following middleware do?  What does the absence of the first argument (path) imply? \n app.use(express.static(__dirname + '/public'));",
    "categories": ["NODE.JS", "EXPRESS"],
    "answer": "The middleware function express.static loads the static asses in the __dirname + '/public' folder on a request.  The absence of path as the first argument in app.use means it will executer for every request - not just for one API endpoint."},
    {"question": "What does REST API stand for?  How does it transfer data?",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": "Rest stands for REpresentational State Transfer.  They're useful because the client doesn't need any details about the server.  To transfer data the client needs to know the endpoint (url) and the action it wants to perform (get, req, etc.)"},
    {"question": "How would write a REST API using Express to serve the object: {'message': 'I love these flashcards!'} at the endpoint /json?",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": "app.get('/json', (req, res) {\n   res.json({'message': 'I love these flashcards!'})\n});"},
    {"question": "Is it safe to store private data in the .env file? How do you access a variable from this file in the app?  It's a shell file - what does this mean for variable declarations?",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": "Yes - the .env file is hidden and  only accessbile to you - it's useful for API keys and config options.  You access a variable with this syntax: process.env.VAR_NAME.  Shell files don't allow spaces in variable declarations: MY_VAR=5"},
    {"question": "What are the three parameters to a middleware function?",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": "the request object, the response object, and the next function in the applicationâ€™s request-response cycle"},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""},
    {"question": "",
     "categories": ["NODE.JS", "EXPRESS"],
    "answer": ""}
]}